{"version":3,"file":"main.5f33ab9d87169485cb11.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAe;AACf;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,+DAA+D;AAC/D,6DAA6D;AAC7D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC,gCAAgC;AAChC;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA,2BAA2B;;AAE3B,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,iCAAiC;AACjC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC;;AAEtC,uCAAuC;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,iCAAiC;AACvD;;AAEA;AACA,oBAAoB,iCAAiC;AACrD;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA,mCAAmC,KAAK;AACxC;;AAEA;AACA,gCAAgC,KAAK;;AAErC;AACA;AACA;AACA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA,6BAA6B,mBAAmB,OAAO;AACvD;AACA,kCAAkC,KAAK;AACvC,kCAAkC;AAClC;AACA;AACA;AACA,0BAA0B;AAC1B,+CAA+C,qBAAqB;AACpE,UAAU;AACV;AACA,kCAAkC,KAAK;AACvC;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;UCzWA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNkC;AACX;AACoB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,wBAAwB,iDAAQ,CAAC,yCAAc;;AAE/C;;AAEA","sources":["webpack://rsschool-virtual-keyboard/./src/styles.scss?cb80","webpack://rsschool-virtual-keyboard/./src/Keyboard.js","webpack://rsschool-virtual-keyboard/webpack/bootstrap","webpack://rsschool-virtual-keyboard/webpack/runtime/define property getters","webpack://rsschool-virtual-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://rsschool-virtual-keyboard/webpack/runtime/make namespace object","webpack://rsschool-virtual-keyboard/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export default class Keyboard {\n  #layout;\n\n  #textArea;\n\n  #keys;\n\n  #langs;\n\n  #langI;\n\n  #shift;\n\n  #caps;\n\n  #mouseDown;\n\n  static getChar(keys, key, lang, shift = false, caps = false) {\n    const isCapsIgnored = (kLang, kDef) => {\n      if (kLang && typeof kLang.isCapsIgnored === 'boolean') { return kLang.isCapsIgnored; }\n      if (kDef && typeof kDef.isCapsIgnored === 'boolean') { return kDef.isCapsIgnored; }\n      return false;\n    };\n\n    const k = keys[key];\n    if (!k) return null;\n\n    const [kLang, kDef] = [k[lang], k.default];\n    const realShift = (caps && !isCapsIgnored(kLang, kDef)) ? !shift : shift;\n    if (realShift) {\n      if (kLang && kLang.shift) { return kLang.shift; }\n      if (kDef && kDef.shift) { return kDef.shift; }\n    }\n    if (kLang && kLang.char) { return kLang.char; }\n    if (kDef && kDef.char) { return kDef.char; }\n    return null;\n  }\n\n  #getChar = (key, lang, shift, caps) => Keyboard.getChar(this.#keys, key, lang, shift, caps);\n\n  getLayout = () => this.#layout;\n\n  #redraw = (shiftKey = false) => {\n    const [lang, keys, caps] = [this.#langs[this.#langI], this.#keys, this.#caps];\n    Object.keys(keys).forEach((keyId) => {\n      const key = keys[keyId];\n      const newChar = Keyboard.getChar(keys, keyId, lang, shiftKey, caps);\n      key.element.innerText = newChar;\n    });\n  };\n\n  toggleLang = (shiftKey) => {\n    this.#langI += 1;\n    if (this.#langI >= this.#langs.length) { this.#langI = 0; }\n    localStorage.lang = this.#langs[this.#langI];\n    this.#redraw(shiftKey);\n  };\n\n  static addCharAtSelectionStart(textArea, char) {\n    const selStart = textArea.selectionStart;\n    const newPos = selStart + (char === '\\r\\n' ? 1 : char.length);\n    textArea.setRangeText(char);\n    textArea.setSelectionRange(newPos, newPos, 'none');\n  }\n\n  static writeKey(textArea, char) {\n    const [selStart, selEnd] = [textArea.selectionStart, textArea.selectionEnd];\n    if (selStart !== selEnd) textArea.setRangeText('');\n    Keyboard.addCharAtSelectionStart(textArea, char);\n  }\n\n  static deletePartOfTextArea(textArea, selectionStart, selectionEnd) {\n    textArea.setSelectionRange(selectionStart, selectionEnd, 'none');\n    textArea.setRangeText('');\n  }\n\n  static doBackspace(textArea) {\n    const [selStart, selEnd] = [textArea.selectionStart, textArea.selectionEnd];\n    if (selEnd < 1) return;\n    if (selEnd === selStart) { textArea.setSelectionRange(selStart - 1, selEnd, 'none'); }\n    textArea.setRangeText('');\n  }\n\n  static doDelete(textArea) {\n    const [selStart, selEnd] = [textArea.selectionStart, textArea.selectionEnd];\n    if (selStart >= textArea.value.length) return;\n    if (selEnd === selStart) { textArea.setSelectionRange(selStart, selEnd + 1, 'none'); }\n    textArea.setRangeText('');\n  }\n\n  static doTab(textArea) { Keyboard.writeKey(textArea, '    '); }\n\n  static doEnter(textArea) { Keyboard.writeKey(textArea, '\\r\\n'); }\n\n  static moveCursorLeft(textArea, shift, move) {\n    let [selStart, selEnd, direction] = [\n      textArea.selectionStart, textArea.selectionEnd, textArea.selectionDirection];\n    if (selStart === selEnd) {\n      direction = 'none';\n    }\n\n    if (shift) {\n      if (direction !== 'forward' || selStart === selEnd) {\n        selStart = Math.max(selStart - move, 0);\n        direction = 'backward';\n      } else {\n        selEnd = Math.max(selEnd - move, 0);\n      }\n\n      if (selEnd < selStart) {\n        [selStart, selEnd] = [selEnd, selStart];\n        direction = 'backward';\n      }\n    } else {\n      if (selStart === selEnd) { selStart = Math.max(selStart - move, 0); }\n      selEnd = selStart;\n\n      direction = 'none';\n    }\n\n    textArea.setSelectionRange(selStart, selEnd, direction);\n  }\n\n  static moveCursorRight(textArea, shift, move) {\n    let [selStart, selEnd, direction] = [\n      textArea.selectionStart, textArea.selectionEnd, textArea.selectionDirection];\n    if (selStart === selEnd) {\n      direction = 'none';\n    }\n\n    if (shift) {\n      if (direction !== 'backward' || selStart === selEnd) {\n        selEnd = Math.min(selEnd + move, textArea.value.length);\n        direction = 'forward';\n      } else {\n        selStart = Math.min(selStart + move, textArea.value.length);\n      }\n\n      if (selEnd < selStart) {\n        [selStart, selEnd] = [selEnd, selStart];\n        direction = 'forward';\n      }\n    } else {\n      if (selStart === selEnd) { selEnd = Math.min(selEnd + move, textArea.value.length); }\n      selStart = selEnd;\n      direction = 'none';\n    }\n\n    textArea.setSelectionRange(selStart, selEnd, direction);\n  }\n\n  static arrowLeft(textArea, shift) { Keyboard.moveCursorLeft(textArea, shift, 1); }\n\n  static arrowRight(textArea, shift) { Keyboard.moveCursorRight(textArea, shift, 1); }\n\n  static getRowsSum = (textArea) => textArea.value.split('\\r\\n').reduce((p, c) => [...p, ...c.split('\\n')], [])\n    .map((v) => v.length).reduce((p, c, i) => [...p, c + 1 + (i > 0 ? p[i - 1] : 0)], []);\n\n  static arrowUp(textArea, shift) {\n    const rowsSum = Keyboard.getRowsSum(textArea);\n    const selVal = (textArea.selectionDirection !== 'forward') ? textArea.selectionStart : textArea.selectionEnd;\n    const rowId = rowsSum.findIndex((v) => v > selVal);\n\n    if (rowId === 0) Keyboard.moveCursorLeft(textArea, shift, Infinity);\n    else {\n      const prevRowSum = rowsSum[rowId - 1];\n      const prevPrevRowSum = rowId > 1 ? rowsSum[rowId - 2] : 0;\n      const pos = selVal - prevRowSum;\n      const prevRowLength = prevRowSum - prevPrevRowSum;\n      const newPos = Math.min(prevRowLength - 1, pos);\n      const newSelection = prevPrevRowSum + newPos;\n      const move = selVal - newSelection;\n      Keyboard.moveCursorLeft(textArea, shift, move);\n    }\n  }\n\n  static arrowDown(textArea, shift) {\n    const rowsSum = Keyboard.getRowsSum(textArea);\n    const selVal = (textArea.selectionDirection !== 'backward') ? textArea.selectionEnd : textArea.selectionStart;\n\n    const rowId = rowsSum.findIndex((v) => v > selVal);\n\n    if (rowId === rowsSum.length - 1) Keyboard.moveCursorRight(textArea, shift, Infinity);\n    else {\n      const pos = selVal - (rowId > 0 ? rowsSum[rowId - 1] : 0);\n      const nextRowLength = rowsSum[rowId + 1] - rowsSum[rowId];\n      const newPos = Math.min(nextRowLength - 1, pos);\n      const newSelection = rowsSum[rowId] + newPos;\n      const move = newSelection - selVal;\n      Keyboard.moveCursorRight(textArea, shift, move);\n    }\n  }\n\n  doBackspace = () => Keyboard.doBackspace(this.#textArea);\n\n  doDelete = () => Keyboard.doDelete(this.#textArea);\n\n  doTab = () => Keyboard.doTab(this.#textArea);\n\n  doEnter = () => Keyboard.doEnter(this.#textArea);\n\n  arrowRight = (shift) => Keyboard.arrowRight(this.#textArea, shift);\n\n  arrowLeft = (shift) => Keyboard.arrowLeft(this.#textArea, shift);\n\n  arrowUp = (shift) => Keyboard.arrowUp(this.#textArea, shift);\n\n  arrowDown = (shift) => Keyboard.arrowDown(this.#textArea, shift);\n\n  static addActive(key) {\n    key.element.classList.add('active');\n  }\n\n  static removeActive(key) {\n    key.element.classList.remove('active');\n  }\n\n  doShift(shiftKey, capsKey) {\n    if (this.#shift === shiftKey && !capsKey) return;\n    if (capsKey) {\n      const capsNew = !this.#caps;\n      const keyCaps = this.#keys.CapsLock;\n      if (keyCaps) {\n        if (capsNew) Keyboard.addActive(keyCaps);\n        else Keyboard.removeActive(keyCaps);\n      }\n      this.#caps = capsNew;\n    }\n\n    this.#redraw(shiftKey);\n    this.#shift = shiftKey;\n  }\n\n  static #noEvent = ['CapsLock', 'ShiftLeft', 'ShiftRight', 'ControlLeft', 'ControlRight', 'AltLeft', 'AltRight', 'MetaLeft', 'MetaRight'];\n\n  #specialTextFunc = {\n    Backspace: this.doBackspace,\n    Delete: this.doDelete,\n    Tab: this.doTab,\n    Enter: this.doEnter,\n    ArrowRight: this.arrowRight,\n    ArrowLeft: this.arrowLeft,\n    ArrowUp: this.arrowUp,\n    ArrowDown: this.arrowDown,\n  };\n\n  buttonDown(event) {\n    if (event.code !== 'F5' && event.code !== 'F12' && event.preventDefault) event.preventDefault();\n    this.#textArea.focus();\n    const key = this.#keys[event.code];\n    if (!key) return;\n    if (event.ctrlKey && event.altKey) this.toggleLang(event.shiftKey);\n    const caps = event.code === 'CapsLock';\n    if (!caps) Keyboard.addActive(key);\n    if (!event.repeat && (event.shiftKey || caps)) {\n      this.doShift(event.shiftKey, caps);\n    }\n    if (Keyboard.#noEvent.includes(event.code)) return;\n    if (this.#specialTextFunc[event.code]) this.#specialTextFunc[event.code](event.shiftKey);\n    else {\n      const el = key.element;\n      Keyboard.writeKey(this.#textArea, el.innerText.length > 0 ? el.innerText : el.innerHTML);\n    }\n  }\n\n  buttonUp(event) {\n    if (event.preventDefault) event.preventDefault();\n    const key = this.#keys[event.code];\n    if (!key) return;\n    if (event.code !== 'CapsLock') Keyboard.removeActive(key);\n\n    if (event.code === 'ShiftLeft' || event.code === 'ShiftRight') {\n      this.doShift(event.shiftKey, false);\n      if (this.#keys.ShiftLeft) Keyboard.removeActive(this.#keys.ShiftLeft);\n      if (this.#keys.ShiftRight) Keyboard.removeActive(this.#keys.ShiftRight);\n    }\n  }\n\n  keyDown(event) {\n    this.buttonDown(event);\n  }\n\n  keyUp(event) {\n    this.buttonUp(event);\n  }\n\n  mouseDown(event) {\n    if (event.target.nodeName !== 'BUTTON') return;\n    this.#mouseDown = event.target.id;\n    this.buttonDown({ ...event, code: event.target.id });\n  }\n\n  mouseUp(event) {\n    this.buttonUp({ ...event, code: this.#mouseDown });\n    this.#textArea.focus();\n  }\n\n  constructor(design) {\n    const {\n      Keys, Rows, StyleKeys, KeyStyles, Name,\n    } = design;\n    const fragment = document.createDocumentFragment();\n\n    const textArea = document.createElement('textarea');\n    textArea.setAttribute('id', `${Name}__textarea`);\n    fragment.appendChild(textArea);\n\n    const board = document.createElement('div');\n    board.setAttribute('id', `${Name}__board`);\n\n    const keys = {};\n    const langs = {};\n    Rows.forEach((row) => {\n      const rowDiv = document.createElement('div');\n      rowDiv.classList.add(`${Name}__row`);\n      row.forEach((keyId) => {\n        if (keyId) {\n          if (keys[keyId]) { throw new Error(`${keyId} was already added!`); }\n          const keyDiv = document.createElement('button');\n          keyDiv.classList.add(`${Name}__key`);\n          if (KeyStyles[keyId]) { keyDiv.classList.add(KeyStyles[keyId]); }\n          keyDiv.id = keyId;\n          rowDiv.appendChild(keyDiv);\n          const key = Keys[keyId];\n          keys[keyId] = { ...key, element: keyDiv };\n          Object.keys(key).forEach((lang) => { langs[lang] = null; });\n        } else {\n          const keyDiv = document.createElement('div');\n          keyDiv.classList.add(`${Name}__empty`);\n          rowDiv.appendChild(keyDiv);\n        }\n      });\n      board.appendChild(rowDiv);\n    });\n\n    fragment.appendChild(board);\n\n    Object.keys(StyleKeys).forEach((style) => {\n      ((Array.isArray(StyleKeys[style])) ? StyleKeys[style] : [StyleKeys[style]])\n        .forEach((key) => {\n          if (keys[key]) { keys[key].element.classList.add(style); }\n        });\n    });\n\n    const langsArr = Object.keys(langs).filter((v) => v !== 'default');\n    const langI = localStorage.lang ? Math.max(0, langsArr.indexOf(localStorage.lang)) : 0;\n\n    [this.#textArea, this.#langs, this.#keys, this.#langI, this.#layout] = [\n      textArea, langsArr, keys, langI, fragment];\n\n    Object.keys(keys).forEach((key) => {\n      const char = this.#getChar(key, langsArr[langI]);\n      if (char) keys[key].element.innerHTML = char;\n    });\n\n    document.addEventListener('keyup', this.keyUp.bind(this));\n    document.addEventListener('keydown', this.keyDown.bind(this));\n\n    document.addEventListener('mousedown', this.mouseDown.bind(this));\n    document.addEventListener('mouseup', this.mouseUp.bind(this));\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Keyboard from './Keyboard';\nimport './styles.scss';\nimport keyBoardDesign from './design.json';\n\nconst createTitle = () => {\n  const pTitle = document.createElement('p');\n  pTitle.innerHTML = 'Virtual Keyboard<br>Windows<br>Ctrl+Alt to switch input language';\n  pTitle.id = 'title';\n  pTitle.classList.add('text');\n  return pTitle;\n};\n\nconst fragment = document.createDocumentFragment();\n\nconst baseDIv = document.createElement('div');\nbaseDIv.id = 'wrapper';\nbaseDIv.appendChild(createTitle());\nbaseDIv.appendChild(new Keyboard(keyBoardDesign).getLayout());\n\nfragment.appendChild(baseDIv);\n\ndocument.body.appendChild(fragment);\n"],"names":[],"sourceRoot":""}